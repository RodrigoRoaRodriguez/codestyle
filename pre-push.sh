#!/bin/bash

#######################################################################
# FILE AUTO GENERATED BY https://github.com/gutro/leo-base-repo-files #
#######################################################################

PATH=$PATH:/usr/local/bin:/usr/local/sbin

COMPONENT=`cat package.json |python -c 'import json,sys;obj=json.load(sys.stdin);print obj.get("name", "").split("/")[-1];'`
VERSION=`cat package.json |python -c 'import json,sys;obj=json.load(sys.stdin);print obj.get("version", "");'`
IS_SERVICE=`cat package.json |python -c 'import json,sys;obj=json.load(sys.stdin);print str(obj.get("isService", "")).lower();'`
MAINTAINER=`cat package.json |python -c 'import json,sys;obj=json.load(sys.stdin);print obj.get("maintainerTeam", "");'`
SHORT_NAME=`cat package.json |python -c 'import json,sys;obj=json.load(sys.stdin);print obj.get("shortName", "");'`
COMMIT=`git rev-parse HEAD`
GIT_BRANCH=`git rev-parse --abbrev-ref HEAD`
BRANCH=`basename $GIT_BRANCH`
GIT_TAG_PREPUSH="prepush-$BRANCH"

ERROR=0
ERRORS=""

RUN_ALL="false"
CYAN='\033[0;36m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
RED='\033[0;31m'

function coloredEcho {
  NC='\033[0m'
  printf "# $1 $2 ${NC}\n"
}

function displayError {
  ERROR+=1
  ERRORS+="$2\n"
  coloredEcho "$1" "$2"
}

function separatorEcho {
  coloredEcho ${CYAN} "-----------------------------------------"
}

mkdir -p prepush-checks

separatorEcho
coloredEcho ${BLUE} "Checking branch and basic package.json configuration"
VALID_BRANCH=`python -c "
import re;

if re.match('^([A-Z]{2,}-[0-9]+)_(.*)$', '$BRANCH'):
   print True;
else:
  print False;
"`

if [[ $VALID_BRANCH == "False" ]];
then
  displayError ${RED} "ERROR: Branch must include the JIRA ID and be in format of \`PROJECT-ID_my-branch-name\`\033[0m\n"
fi

if [[ "$COMPONENT" != "leo-boilerplate-service" ]];
then
  if [[ -z "$MAINTAINER" ]] || [[ "$MAINTAINER" == "unknown" ]];
  then
    displayError ${RED} "ERROR: maintainerTeam in 'package.json' needs to be updated"
  fi

  if [[ -z "$IS_SERVICE" ]];
  then
    displayError ${RED} "ERROR: isService in 'package.json' needs to be set to either true or false"
  fi
  
  if $IS_SERVICE && [[ $COMPONENT != *"frontend"* ]];
  then
    if [[ -z "$SHORT_NAME" ]] || [[ "$SHORT_NAME" == "lbs" ]];
    then
      displayError ${RED} "ERROR: shortName in 'package.json' needs to be updated!"
    fi
    
    if ! grep -q CMD Dockerfile;
    then
      displayError ${RED} "ERROR: CMD missing from Dockerfile, remove and & reinstall node_modules!"
    fi
  fi
fi

PKG_NAME=`cat package.json | python -c 'import json,sys;obj=json.load(sys.stdin);print obj.get("name", "");'`
PUB_VERSION=`npm show ${PKG_NAME} version --loglevel silent; true`
separatorEcho
coloredEcho ${BLUE} "Checking version set in package json against current published npm version"
if [[ -n "$PUB_VERSION" ]] && [[ "$VERSION" = "$PUB_VERSION" ]];
then
  displayError ${RED} "ERROR: Version not updated, version in the root package.json needs to be updated!"
  exit 1
fi
if [[ -d "client" ]] && [[ -f "client/package.json" ]];
then
  PKG_CLIENT_NAME=`cat client/package.json | python -c 'import json,sys;obj=json.load(sys.stdin);print obj.get("name", "");'`
  PUB_CLIENT_VERSION=`npm show ${PKG_CLIENT_NAME} version --loglevel silent; true`
  if [[ -n "$PUB_CLIENT_VERSION" ]] && [[ "$VERSION" = "$PUB_CLIENT_VERSION" ]];
  then
    displayError ${RED} "ERROR: Client version not updated, version in the root package.json needs to be updated!"
    exit 1
  fi

  if [[ "$COMPONENT" != "leo-boilerplate-service" ]];
  then
    if [[ "$PKG_CLIENT_NAME" != "@leogears/$COMPONENT-client" ]];
    then
      displayError ${RED} "ERROR: client name in 'client/package.json' needs to be updated to match the service name!"
    fi
  fi
fi

NVM_HOME="$HOME/.nvm/nvm.sh"
NVM_LOCAL="/usr/local/opt/nvm/nvm.sh"
if [[ -s ${NVM_HOME} ]] || [[ -s ${NVM_LOCAL} ]];
then
  coloredEcho ${BLUE} "Running nvm runtime selection and install"

  if [[ -s ${NVM_HOME} ]];
  then
    . ${NVM_HOME} # This loads NVM
  else
    . ${NVM_LOCAL} # This loads NVM when installed from Homebrew
  fi

  nvm install;
  separatorEcho
fi

coloredEcho ${BLUE} "Running npm update"
if [ "$COMMIT" = `cat prepush-checks/PREPUSH_NPM_UPDATE 2> /dev/null || echo ":("` ];
then
  coloredEcho ${GREEN} "NPM_UPDATE already run for this commit, skipping..."
else
  npm outdated; npm prune && npm update --save-dev && npm update --save;
  if [ $? -ne 0 ];
  then
    displayError ${RED} "ERROR: Failed npm update"
  else
    echo $COMMIT > prepush-checks/PREPUSH_NPM_UPDATE;
  fi
fi

separatorEcho
coloredEcho ${BLUE} "Checking Service NPM package versions for @leogears modules outdated"
if npm outdated | grep '^@leogears';
then
  displayError ${RED} "ERROR: @leogears modules are not up to date ^!\033[0m\n"
fi

if [[ -d "client" ]] && [[ -f "client/package.json" ]];
then
  separatorEcho
  coloredEcho ${BLUE} "Checking Client NPM package versions"
  cd ./client
  npm outdated; true
  cd ..
fi

separatorEcho
if [ "$COMMIT" = `cat prepush-checks/PREPUSH_LINT_FIX 2> /dev/null || echo ":("` ];
then
  coloredEcho ${GREEN} "LINT_FIX already run for this commit, skipping..."
else
  coloredEcho ${BLUE} "Checking linting"
  npm run lint-fix;
  if [ $? -ne 0 ]; then
    displayError ${RED} "ERROR: Failed LINT --fix"
  else
    echo $COMMIT > prepush-checks/PREPUSH_LINT_FIX;
  fi
fi

separatorEcho
if [ "$COMMIT" = `cat prepush-checks/PREPUSH_ONLY_TESTS 2> /dev/null || echo ":("` ];
then
  coloredEcho ${GREEN} "ONLY_TESTS already run for this commit, skipping..."
else
  coloredEcho ${BLUE} "Checking test configuration"
  # Check for .only tests
  (grep --include=*.js --exclude={*node_modules*,*build*,*coverage*} -rnw '.' -e ".*describe.only(.*" -e ".*it.only(.*");
  if [ $? -eq 0 ]; then
    displayError ${RED} "ERROR: Tests contains .only( please fix!"
  else
    echo $COMMIT > prepush-checks/PREPUSH_ONLY_TESTS;
  fi
fi

  coloredEcho ${BLUE} "Running tests"
if [ "$COMMIT" = `cat prepush-checks/PREPUSH_NPM_TEST 2> /dev/null || echo ":("` ];
then
  coloredEcho ${GREEN} "NPM_TEST already run for this commit, skipping..."
else
  npm test;
  if [ $? -ne 0 ]; then
    displayError ${RED} "ERROR: Failed TEST"
  else
    echo $COMMIT > prepush-checks/PREPUSH_NPM_TEST;
  fi
fi

separatorEcho
coloredEcho ${BLUE} "Checking local repository"
# Don't push if there are uncommitted files
if [[ $(git status --porcelain | grep -vE "(.env)") ]]; then
  displayError ${RED} "ERROR: Working directory is NOT clean!"
fi

# Check for errors
if [[ "$ERROR" -gt 0 ]];
then
  displayError ${RED} "ERROR: Found errors"
  exit 1;
fi

if [[ -f "pre-push-extra.sh" ]];
  then
  separatorEcho
  coloredEcho ${BLUE} "Running pre-push extra"
fi

if [ "$COMMIT" = `cat prepush-checks/PREPUSH_EXTRA 2> /dev/null || echo ":("` ];
then
  coloredEcho ${GREEN} "EXTRA already run for this commit, skipping..."
else
  if [[ -f "pre-push-extra.sh" ]];
  then
    bash -x pre-push-extra.sh;
    if [ $? -ne 0 ]; then
      displayError ${RED} "ERROR: Failed pre-push-extra!"
      exit 1;
    fi
  else
    echo $COMMIT > prepush-checks/PREPUSH_EXTRA;
  fi
fi

if [[ "$ERROR" -gt 0 ]];
then
  { set +x ;
    separatorEcho ;
    coloredEcho ${RED} "-----------------------------------------" ;
    coloredEcho ${RED} "Errors found, scroll up to find issues" ;
    coloredEcho ${RED} "-----------------------------------------" ;
    separatorEcho
    coloredEcho ${RED} "${ERROR} Error(s): \n${ERRORS}"
    coloredEcho ${RED} "-----------------------------------------" ;
    separatorEcho ;
    set -x ;
  }
  exit 1;
else
  { set +x ;
    separatorEcho ;
    coloredEcho ${GREEN} "-----------------------------------------" ;
    coloredEcho ${GREEN} "No errors detected" ;
    coloredEcho ${GREEN} "-----------------------------------------" ;
    separatorEcho ;
    set -x ;
  }
fi

if [ `git rev-parse --git-dir` != ".git" ];
then
  displayError ${RED} "ERROR: Not run in repo root, will not set any tags"
  exit 0;
fi

coloredEcho ${BLUE} "Fetching tags"
git fetch --tags

coloredEcho ${BLUE} "Removing existing git tag: ${GIT_TAG_PREPUSH}"
git fetch --tags && git tag -d ${GIT_TAG_PREPUSH} && git push origin :refs/tags/${GIT_TAG_PREPUSH} --no-verify

coloredEcho ${BLUE} "Tagging: ${GIT_TAG_PREPUSH}"
git tag ${GIT_TAG_PREPUSH} -m "auto tag from successful pre-push run"
git push origin ${GIT_TAG_PREPUSH} --no-verify || displayError ${RED} "ERROR: Failed to push git tag ${GIT_TAG_PREPUSH}\033[0m\n";
coloredEcho ${GREEN} "Finished checks, pushed tags to repo"
